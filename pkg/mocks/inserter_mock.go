package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i LogWatcher/pkg/mongo.Inserter -o ./pkg/mocks/inserter_mock.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// InserterMock implements mongo.Inserter
type InserterMock struct {
	t minimock.Tester

	funcInsertGameStats          func(documents []interface{}) (err error)
	inspectFuncInsertGameStats   func(documents []interface{})
	afterInsertGameStatsCounter  uint64
	beforeInsertGameStatsCounter uint64
	InsertGameStatsMock          mInserterMockInsertGameStats
}

// NewInserterMock returns a mock for mongo.Inserter
func NewInserterMock(t minimock.Tester) *InserterMock {
	m := &InserterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.InsertGameStatsMock = mInserterMockInsertGameStats{mock: m}
	m.InsertGameStatsMock.callArgs = []*InserterMockInsertGameStatsParams{}

	return m
}

type mInserterMockInsertGameStats struct {
	mock               *InserterMock
	defaultExpectation *InserterMockInsertGameStatsExpectation
	expectations       []*InserterMockInsertGameStatsExpectation

	callArgs []*InserterMockInsertGameStatsParams
	mutex    sync.RWMutex
}

// InserterMockInsertGameStatsExpectation specifies expectation struct of the Inserter.InsertGameStats
type InserterMockInsertGameStatsExpectation struct {
	mock    *InserterMock
	params  *InserterMockInsertGameStatsParams
	results *InserterMockInsertGameStatsResults
	Counter uint64
}

// InserterMockInsertGameStatsParams contains parameters of the Inserter.InsertGameStats
type InserterMockInsertGameStatsParams struct {
	documents []interface{}
}

// InserterMockInsertGameStatsResults contains results of the Inserter.InsertGameStats
type InserterMockInsertGameStatsResults struct {
	err error
}

// Expect sets up expected params for Inserter.InsertGameStats
func (mmInsertGameStats *mInserterMockInsertGameStats) Expect(documents []interface{}) *mInserterMockInsertGameStats {
	if mmInsertGameStats.mock.funcInsertGameStats != nil {
		mmInsertGameStats.mock.t.Fatalf("InserterMock.InsertGameStats mock is already set by Set")
	}

	if mmInsertGameStats.defaultExpectation == nil {
		mmInsertGameStats.defaultExpectation = &InserterMockInsertGameStatsExpectation{}
	}

	mmInsertGameStats.defaultExpectation.params = &InserterMockInsertGameStatsParams{documents}
	for _, e := range mmInsertGameStats.expectations {
		if minimock.Equal(e.params, mmInsertGameStats.defaultExpectation.params) {
			mmInsertGameStats.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInsertGameStats.defaultExpectation.params)
		}
	}

	return mmInsertGameStats
}

// Inspect accepts an inspector function that has same arguments as the Inserter.InsertGameStats
func (mmInsertGameStats *mInserterMockInsertGameStats) Inspect(f func(documents []interface{})) *mInserterMockInsertGameStats {
	if mmInsertGameStats.mock.inspectFuncInsertGameStats != nil {
		mmInsertGameStats.mock.t.Fatalf("Inspect function is already set for InserterMock.InsertGameStats")
	}

	mmInsertGameStats.mock.inspectFuncInsertGameStats = f

	return mmInsertGameStats
}

// Return sets up results that will be returned by Inserter.InsertGameStats
func (mmInsertGameStats *mInserterMockInsertGameStats) Return(err error) *InserterMock {
	if mmInsertGameStats.mock.funcInsertGameStats != nil {
		mmInsertGameStats.mock.t.Fatalf("InserterMock.InsertGameStats mock is already set by Set")
	}

	if mmInsertGameStats.defaultExpectation == nil {
		mmInsertGameStats.defaultExpectation = &InserterMockInsertGameStatsExpectation{mock: mmInsertGameStats.mock}
	}
	mmInsertGameStats.defaultExpectation.results = &InserterMockInsertGameStatsResults{err}
	return mmInsertGameStats.mock
}

//Set uses given function f to mock the Inserter.InsertGameStats method
func (mmInsertGameStats *mInserterMockInsertGameStats) Set(f func(documents []interface{}) (err error)) *InserterMock {
	if mmInsertGameStats.defaultExpectation != nil {
		mmInsertGameStats.mock.t.Fatalf("Default expectation is already set for the Inserter.InsertGameStats method")
	}

	if len(mmInsertGameStats.expectations) > 0 {
		mmInsertGameStats.mock.t.Fatalf("Some expectations are already set for the Inserter.InsertGameStats method")
	}

	mmInsertGameStats.mock.funcInsertGameStats = f
	return mmInsertGameStats.mock
}

// When sets expectation for the Inserter.InsertGameStats which will trigger the result defined by the following
// Then helper
func (mmInsertGameStats *mInserterMockInsertGameStats) When(documents []interface{}) *InserterMockInsertGameStatsExpectation {
	if mmInsertGameStats.mock.funcInsertGameStats != nil {
		mmInsertGameStats.mock.t.Fatalf("InserterMock.InsertGameStats mock is already set by Set")
	}

	expectation := &InserterMockInsertGameStatsExpectation{
		mock:   mmInsertGameStats.mock,
		params: &InserterMockInsertGameStatsParams{documents},
	}
	mmInsertGameStats.expectations = append(mmInsertGameStats.expectations, expectation)
	return expectation
}

// Then sets up Inserter.InsertGameStats return parameters for the expectation previously defined by the When method
func (e *InserterMockInsertGameStatsExpectation) Then(err error) *InserterMock {
	e.results = &InserterMockInsertGameStatsResults{err}
	return e.mock
}

// InsertGameStats implements mongo.Inserter
func (mmInsertGameStats *InserterMock) InsertGameStats(documents []interface{}) (err error) {
	mm_atomic.AddUint64(&mmInsertGameStats.beforeInsertGameStatsCounter, 1)
	defer mm_atomic.AddUint64(&mmInsertGameStats.afterInsertGameStatsCounter, 1)

	if mmInsertGameStats.inspectFuncInsertGameStats != nil {
		mmInsertGameStats.inspectFuncInsertGameStats(documents)
	}

	mm_params := &InserterMockInsertGameStatsParams{documents}

	// Record call args
	mmInsertGameStats.InsertGameStatsMock.mutex.Lock()
	mmInsertGameStats.InsertGameStatsMock.callArgs = append(mmInsertGameStats.InsertGameStatsMock.callArgs, mm_params)
	mmInsertGameStats.InsertGameStatsMock.mutex.Unlock()

	for _, e := range mmInsertGameStats.InsertGameStatsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmInsertGameStats.InsertGameStatsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInsertGameStats.InsertGameStatsMock.defaultExpectation.Counter, 1)
		mm_want := mmInsertGameStats.InsertGameStatsMock.defaultExpectation.params
		mm_got := InserterMockInsertGameStatsParams{documents}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInsertGameStats.t.Errorf("InserterMock.InsertGameStats got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInsertGameStats.InsertGameStatsMock.defaultExpectation.results
		if mm_results == nil {
			mmInsertGameStats.t.Fatal("No results are set for the InserterMock.InsertGameStats")
		}
		return (*mm_results).err
	}
	if mmInsertGameStats.funcInsertGameStats != nil {
		return mmInsertGameStats.funcInsertGameStats(documents)
	}
	mmInsertGameStats.t.Fatalf("Unexpected call to InserterMock.InsertGameStats. %v", documents)
	return
}

// InsertGameStatsAfterCounter returns a count of finished InserterMock.InsertGameStats invocations
func (mmInsertGameStats *InserterMock) InsertGameStatsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsertGameStats.afterInsertGameStatsCounter)
}

// InsertGameStatsBeforeCounter returns a count of InserterMock.InsertGameStats invocations
func (mmInsertGameStats *InserterMock) InsertGameStatsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsertGameStats.beforeInsertGameStatsCounter)
}

// Calls returns a list of arguments used in each call to InserterMock.InsertGameStats.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInsertGameStats *mInserterMockInsertGameStats) Calls() []*InserterMockInsertGameStatsParams {
	mmInsertGameStats.mutex.RLock()

	argCopy := make([]*InserterMockInsertGameStatsParams, len(mmInsertGameStats.callArgs))
	copy(argCopy, mmInsertGameStats.callArgs)

	mmInsertGameStats.mutex.RUnlock()

	return argCopy
}

// MinimockInsertGameStatsDone returns true if the count of the InsertGameStats invocations corresponds
// the number of defined expectations
func (m *InserterMock) MinimockInsertGameStatsDone() bool {
	for _, e := range m.InsertGameStatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertGameStatsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertGameStatsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsertGameStats != nil && mm_atomic.LoadUint64(&m.afterInsertGameStatsCounter) < 1 {
		return false
	}
	return true
}

// MinimockInsertGameStatsInspect logs each unmet expectation
func (m *InserterMock) MinimockInsertGameStatsInspect() {
	for _, e := range m.InsertGameStatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to InserterMock.InsertGameStats with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertGameStatsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertGameStatsCounter) < 1 {
		if m.InsertGameStatsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to InserterMock.InsertGameStats")
		} else {
			m.t.Errorf("Expected call to InserterMock.InsertGameStats with params: %#v", *m.InsertGameStatsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsertGameStats != nil && mm_atomic.LoadUint64(&m.afterInsertGameStatsCounter) < 1 {
		m.t.Error("Expected call to InserterMock.InsertGameStats")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *InserterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockInsertGameStatsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *InserterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *InserterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockInsertGameStatsDone()
}
